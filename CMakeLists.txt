# ----------------------------------------------------------------------------
#  Root CMake file for DfD Graph Cuts
# ----------------------------------------------------------------------------
#
# To perform an out of source build do the following on the command line:
# 1. navigate to the root project directory (in this case DfD2)
# 2. mkdir build
# 3. cd build
# 4. depending on your system (windows/linux) type the following
# Example CMake build line for windows & VS2015
# windows: cmake -G "Visual Studio 14 2015 Win64" -DUSE_AVX_INSTRUCTIONS=ON ..
# linux: cmake -DUSE_AVX_INSTRUCTIONS=ON ..
#
# 5. To compile:
# windows: cmake --build . --config Release
# linux: cmake --build . --config Release -- -j4
#


cmake_minimum_required(VERSION 3.9)

PROJECT(MNIST_DLL)

set(BUILD_DLL TRUE)

if(BUILD_DLL)

    message("Building DLL ...")

    include(D:/dlib-19.17/dlib/cmake)
    set(COMMON_ROOT "D:/Common")

    include (GenerateExportHeader)
    set(CMAKE_CXX_STANDARD 11)
    
    # get the source files for the DLL
    file(GLOB SOURCES "src/*.cpp"
            "D:/dlib-19.17/dlib/all/*.cpp")
    
    set(project_includes "include" "${COMMON_ROOT}/include" "D:/dlib-19.17/")

    message(" ")
    message("--------------------------------------------------------")
    message("Source Files: ")
    foreach(S ${SOURCES})
        message("  " ${S})
    endforeach()
    message("--------------------------------------------------------")
    message(" ")

    message(" ")
    message("--------------------------------------------------------")
    message("Project Includes: ")
    foreach(S ${project_includes})
        message("  " ${S})
    endforeach()
    message("--------------------------------------------------------")
    message(" ")
    
    include_directories(${project_includes})
    add_library(MNIST_DLL SHARED ${SOURCES})

    GENERATE_EXPORT_HEADER(${PROJECT_NAME}
        BASE_NAME ${PROJECT_NAME}
        EXPORT_MACRO_NAME ${PROJECT_NAME_EXPORT}
        EXPORT_FILE_NAME mnist_dll_Export.h
        STATIC_DEFINE PROJECT_NAME_BUILT_AS_STATIC)
    
    message("MSVC Version: " ${MSVC_VERSION})
    # uncomment for MSVC and cmake greater than 3.6.0
    set(default_build_type "Release")
    if(MSVC AND (${CMAKE_VERSION} VERSION_GREATER "3.6.0"))
        target_compile_options(${PROJECT_NAME} PUBLIC "/MP" "/bigobj")
        set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})
    endif()
    
else()
    message("Building Project ...")
    set(exe_name "dnn_mnist")


    set(PLATFORM "$ENV{PLATFORM}" CACHE INTERNAL "Copied from environment variable")
    message("Platform: " ${PLATFORM})

    if(WIN32)
        include(D:/dlib/dlib/cmake)
        set(COMMON_ROOT "D:/Common")
    else()
        if(${PLATFORM} STREQUAL "HPC")
            include(~/dlib/dlib/cmake)
            set(COMMON_ROOT "~/Common")
        else()
            include(~/dlib/dlib/cmake)
            set(COMMON_ROOT "~/Common")
        endif()
    endif()

    # include(${COMMON_ROOT}/cmake_utils/use_cpp_11.cmake)
    # include(${COMMON_ROOT}/cmake_utils/use_sse_avx.cmake)

    file(GLOB SOURCES "src/*.cpp")

    set(project_includes "include" "${COMMON_ROOT}/include")

    # find OpenCV
    find_package(OpenCV REQUIRED)
    if (OpenCV_FOUND)
        set(project_includes ${project_includes} ${OpenCV_INCLUDE_DIRS})

    else()
        message("OpenCV not found, so we won't build the project.")
    endif()
    
    
    message(" ")
    message("--------------------------------------------------------")
    message("Source Files: ")
    foreach(S ${SOURCES})
        message("  " ${S})
    endforeach()
    message("--------------------------------------------------------")
    message(" ")

    message(" ")
    message("--------------------------------------------------------")
    message("Project Includes: ")
    foreach(S ${project_includes})
        message("  " ${S})
    endforeach()
    message("--------------------------------------------------------")
    message(" ")


    include_directories(${project_includes})
    add_executable(${exe_name} ${SOURCES})
    target_link_libraries(${exe_name} dlib::dlib ${OpenCV_LIBS})

    if(WIN32)
        message("MSVC Version: " ${MSVC_VERSION})
        # uncomment for MSVC and cmake greater than 3.6.0
        set(default_build_type "Release")
        if(MSVC AND (${CMAKE_VERSION} VERSION_GREATER "3.6.0"))
            target_compile_options(${exe_name} PRIVATE "/MP")
            set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${exe_name})
        endif()

    endif()

endif()


message(" ")
message(STATUS "Build Complete!")
message(" ")



